#include <iostream>
#include <chrono>
#include <random>
#include <fstream>

//Class to hold all elements of the random generator
class Rand_Num_Gen {
public:
	Rand_Num_Gen();
	int randomGenerator(int lower_limit, int upper_limit);
private:
	std::uniform_int_distribution<int> dist;
	std::mt19937_64 the_generator;
	std::random_device ran_dev;
};

//Constructor for Rand_Num_Gen to create a seed for random generation when the function object is created
Rand_Num_Gen::Rand_Num_Gen() {
	the_generator.seed(ran_dev());
}

//The actual random generation function
int Rand_Num_Gen::randomGenerator(int lower_limit, int upper_limit) {
	std::uniform_int_distribution<int>::param_type parameters(lower_limit, upper_limit);
	dist.param(parameters);
	return dist(the_generator);
}

void output_to_console(int n, int *numbers) {
	for (int i = 0; i < n; ++i) {
		std::cout << numbers[i] << std::endl;
	}
}

void output_to_file(int n, int *numbers) {
	std::ofstream output;
	output.open("data.txt");
	for (int i = 0; i < n; ++i) {
		output << numbers[i] << std::endl;
	}
	output.close();
}


int main() {
	int n, lower_limit, upper_limit;	//All limits are inclusive, so 1 lower limit and 10 upper limit can give 1 and 10 as results
	Rand_Num_Gen m;
	//Call m.randomGenerator(lower_limit, upper_limit) to use

	//Example with user input:

	//Input
	std::cout << "Input amount of numbers to generate\n";
	std::cin >> n;
	std::cout << "Lower limit: ";
	std::cin >> lower_limit;
	std::cout << "Upper limit: ";
	std::cin >> upper_limit;
	//Just an array to hold generated numbers
	int *numbers = new int[n];
	//Loop to generate them
	for (int i = 0; i < n; ++i) {
		//Numbers generated by calling the object m with the random generation function
		numbers[i] = m.randomGenerator(lower_limit, upper_limit);
	}
	//Output
	output_to_console(n, numbers);
	output_to_file(n, numbers);
	//Exit
	std::cout << "Input anything to exit: ";
	std::cin >> n;
}
